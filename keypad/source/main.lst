CCS PCM C Compiler, Version 5.015, 5967               11-Dec-20 15:14

               Filename:   C:\Users\Furkan\Desktop\Microprocessor Midterm\keypad\source\main.lst

               ROM used:   142 words (2%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           7 (2%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   064
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4000000) 
0004:  MOVLW  21
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
....................  
.................... #use fast_io(b) 
.................... #use fast_io(d) 
....................  
.................... #byte portb = 0x06 
....................  
.................... #define col1 pin_d0 
.................... #define col2 pin_d1 
.................... #define col3 pin_d2 
.................... #define row1 pin_d3 
.................... #define row2 pin_d4 
.................... #define row3 pin_d5 
....................  
.................... char tus=0; 
....................  
.................... char keypad_read() { 
....................    output_d(0x00); 
0019:  CLRF   08
....................     
....................    output_high(row1); 
001A:  BSF    08.3
....................    if(input(col1)) { 
001B:  BTFSS  08.0
001C:  GOTO   022
....................       delay_ms(20); 
001D:  MOVLW  14
001E:  MOVWF  21
001F:  CALL   004
....................       tus = 1; 
0020:  MOVLW  01
0021:  MOVWF  20
....................    } 
....................    if(input(col2)) { 
0022:  BTFSS  08.1
0023:  GOTO   029
....................       delay_ms(20); 
0024:  MOVLW  14
0025:  MOVWF  21
0026:  CALL   004
....................       tus = 2; 
0027:  MOVLW  02
0028:  MOVWF  20
....................    } 
....................    if(input(col3)) { 
0029:  BTFSS  08.2
002A:  GOTO   030
....................       delay_ms(20); 
002B:  MOVLW  14
002C:  MOVWF  21
002D:  CALL   004
....................       tus = 3; 
002E:  MOVLW  03
002F:  MOVWF  20
....................    } 
....................    output_low(row1); 
0030:  BCF    08.3
....................     
....................    output_high(row2); 
0031:  BSF    08.4
....................    if(input(col1)) { 
0032:  BTFSS  08.0
0033:  GOTO   039
....................       delay_ms(20); 
0034:  MOVLW  14
0035:  MOVWF  21
0036:  CALL   004
....................       tus = 4; 
0037:  MOVLW  04
0038:  MOVWF  20
....................    } 
....................    if(input(col2)) { 
0039:  BTFSS  08.1
003A:  GOTO   040
....................       delay_ms(20); 
003B:  MOVLW  14
003C:  MOVWF  21
003D:  CALL   004
....................       tus = 5; 
003E:  MOVLW  05
003F:  MOVWF  20
....................    } 
....................    if(input(col3)) { 
0040:  BTFSS  08.2
0041:  GOTO   047
....................       delay_ms(20); 
0042:  MOVLW  14
0043:  MOVWF  21
0044:  CALL   004
....................       tus = 6; 
0045:  MOVLW  06
0046:  MOVWF  20
....................    } 
....................    output_low(row2); 
0047:  BCF    08.4
....................     
....................    output_high(row3); 
0048:  BSF    08.5
....................    if(input(col1)) { 
0049:  BTFSS  08.0
004A:  GOTO   050
....................       delay_ms(20); 
004B:  MOVLW  14
004C:  MOVWF  21
004D:  CALL   004
....................       tus = 7; 
004E:  MOVLW  07
004F:  MOVWF  20
....................    } 
....................    if(input(col2)) { 
0050:  BTFSS  08.1
0051:  GOTO   057
....................       delay_ms(20); 
0052:  MOVLW  14
0053:  MOVWF  21
0054:  CALL   004
....................       tus = 8; 
0055:  MOVLW  08
0056:  MOVWF  20
....................    } 
....................    if(input(col3)) { 
0057:  BTFSS  08.2
0058:  GOTO   05E
....................       delay_ms(20); 
0059:  MOVLW  14
005A:  MOVWF  21
005B:  CALL   004
....................       tus = 9; 
005C:  MOVLW  09
005D:  MOVWF  20
....................    } 
....................    output_low(row3); 
005E:  BCF    08.5
....................     
....................    return tus; 
005F:  MOVF   20,W
0060:  MOVWF  78
0061:  BCF    0A.3
0062:  BCF    0A.4
0063:  GOTO   08A (RETURN)
.................... } 
....................  
.................... void main() 
0064:  MOVF   03,W
0065:  ANDLW  1F
0066:  MOVWF  03
0067:  CLRF   20
0068:  BSF    03.5
0069:  BSF    1F.0
006A:  BSF    1F.1
006B:  BSF    1F.2
006C:  BCF    1F.3
006D:  MOVLW  07
006E:  MOVWF  1C
006F:  BCF    03.7
.................... { 
....................    setup_psp(PSP_DISABLED); 
0070:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
0071:  BCF    03.5
0072:  CLRF   10
....................    setup_timer_2(T2_DISABLED, 0, 1); 
0073:  MOVLW  00
0074:  MOVWF  78
0075:  MOVWF  12
0076:  MOVLW  00
0077:  BSF    03.5
0078:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
0079:  BSF    1F.0
007A:  BSF    1F.1
007B:  BSF    1F.2
007C:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
007D:  BCF    03.5
007E:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
007F:  MOVLW  F0
0080:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF); 
0081:  ANDWF  1D,F
....................     
....................    set_tris_b(0x00); 
0082:  MOVLW  00
0083:  BSF    03.5
0084:  MOVWF  06
....................    set_tris_d(0x07); 
0085:  MOVLW  07
0086:  MOVWF  08
....................    output_b(0x00); 
0087:  BCF    03.5
0088:  CLRF   06
....................     
....................    while(TRUE) 
....................    { 
....................       portb=keypad_read(); 
0089:  GOTO   019
008A:  MOVF   78,W
008B:  MOVWF  06
008C:  GOTO   089
....................    } 
....................  
.................... } 
....................  
008D:  SLEEP
....................  

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
