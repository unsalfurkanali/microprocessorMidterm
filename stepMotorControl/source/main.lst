CCS PCM C Compiler, Version 5.015, 5967               13-Dec-20 15:13

               Filename:   C:\Users\Furkan\Desktop\Microprocessor Midterm\stepMotorControl\source\main.lst

               ROM used:   129 words (2%)
                           Largest free fragment is 2048
               RAM used:   12 (3%) at main() level
                           12 (3%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   019
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4000000) 
0004:  MOVLW  26
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
.................... #use fast_io(b) 
.................... #use fast_io(d) 
....................  
.................... #define forward pin_a0 
.................... #define back pin_a1 
....................  
.................... int fullstep[] = {0x09, 0x0c, 0x06, 0x03}; 
*
0027:  MOVLW  09
0028:  BCF    03.5
0029:  MOVWF  20
002A:  MOVLW  0C
002B:  MOVWF  21
002C:  MOVLW  06
002D:  MOVWF  22
002E:  MOVLW  03
002F:  MOVWF  23
....................  
.................... int i = 0, time = 400; 
.................... void main() 
*
0019:  MOVF   03,W
001A:  ANDLW  1F
001B:  MOVWF  03
001C:  CLRF   24
001D:  MOVLW  90
001E:  MOVWF  25
001F:  BSF    03.5
0020:  BSF    1F.0
0021:  BSF    1F.1
0022:  BSF    1F.2
0023:  BCF    1F.3
0024:  MOVLW  07
0025:  MOVWF  1C
0026:  BCF    03.7
.................... { 
....................   setup_psp(PSP_DISABLED); 
*
0030:  BSF    03.5
0031:  BCF    09.4
....................   setup_timer_1(T1_DISABLED); 
0032:  BCF    03.5
0033:  CLRF   10
....................   setup_timer_2(T2_DISABLED, 0, 1); 
0034:  MOVLW  00
0035:  MOVWF  78
0036:  MOVWF  12
0037:  MOVLW  00
0038:  BSF    03.5
0039:  MOVWF  12
....................   setup_adc_ports(NO_ANALOGS); 
003A:  BSF    1F.0
003B:  BSF    1F.1
003C:  BSF    1F.2
003D:  BCF    1F.3
....................   setup_adc(ADC_OFF); 
003E:  BCF    03.5
003F:  BCF    1F.0
....................   setup_CCP1(CCP_OFF); 
0040:  MOVLW  F0
0041:  ANDWF  17,F
....................   setup_CCP2(CCP_OFF); 
0042:  ANDWF  1D,F
....................    
....................   set_tris_b(0x00); 
0043:  MOVLW  00
0044:  BSF    03.5
0045:  MOVWF  06
....................   set_tris_a(0x03); 
0046:  MOVLW  03
0047:  MOVWF  05
....................   output_b(0x00); 
0048:  BCF    03.5
0049:  CLRF   06
....................    while(TRUE) { 
....................       if(input(forward)) { 
004A:  BSF    03.5
004B:  BSF    05.0
004C:  BCF    03.5
004D:  BTFSS  05.0
004E:  GOTO   065
....................          output_b(fullstep[i]); 
004F:  MOVLW  20
0050:  ADDWF  24,W
0051:  MOVWF  04
0052:  BCF    03.7
0053:  MOVF   00,W
0054:  MOVWF  26
0055:  MOVWF  06
....................          while(input(forward)); 
0056:  BSF    03.5
0057:  BSF    05.0
0058:  BCF    03.5
0059:  BTFSC  05.0
005A:  GOTO   056
....................          delay_ms(time); 
005B:  MOVF   25,W
005C:  MOVWF  26
005D:  CALL   004
....................           
....................          if(i==3) i=-1; 
005E:  MOVF   24,W
005F:  SUBLW  03
0060:  BTFSS  03.2
0061:  GOTO   064
0062:  MOVLW  FF
0063:  MOVWF  24
....................          i++; 
0064:  INCF   24,F
....................       } 
....................        
....................       if(input(back)) { 
0065:  BSF    03.5
0066:  BSF    05.1
0067:  BCF    03.5
0068:  BTFSS  05.1
0069:  GOTO   07F
....................          if(i==0) i=4; 
006A:  MOVF   24,F
006B:  BTFSS  03.2
006C:  GOTO   06F
006D:  MOVLW  04
006E:  MOVWF  24
....................          output_b(fullstep[--i]); 
006F:  DECF   24,F
0070:  MOVLW  20
0071:  ADDWF  24,W
0072:  MOVWF  04
0073:  BCF    03.7
0074:  MOVF   00,W
0075:  MOVWF  26
0076:  MOVWF  06
....................          while(input(back)); 
0077:  BSF    03.5
0078:  BSF    05.1
0079:  BCF    03.5
007A:  BTFSC  05.1
007B:  GOTO   077
....................          delay_ms(time); 
007C:  MOVF   25,W
007D:  MOVWF  26
007E:  CALL   004
....................       } 
007F:  GOTO   04A
....................        
....................     
....................    } 
....................  
.................... } 
0080:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
