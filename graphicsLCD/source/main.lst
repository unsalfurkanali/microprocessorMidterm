CCS PCM C Compiler, Version 5.015, 5967               14-Dec-20 11:14

               Filename:   C:\Users\Furkan\Desktop\Microprocessor Midterm\graphicsLCD\source\main.lst

               ROM used:   1426 words (17%)
                           Largest free fragment is 2048
               RAM used:   27 (7%) at main() level
                           52 (14%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   50B
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDLW  0B
0008:  BTFSC  03.0
0009:  INCF   0A,F
000A:  MOVWF  02
000B:  RETLW  00
000C:  RETLW  00
000D:  RETLW  00
000E:  RETLW  00
000F:  RETLW  00
0010:  RETLW  00
0011:  RETLW  00
0012:  RETLW  5F
0013:  RETLW  00
0014:  RETLW  00
0015:  RETLW  00
0016:  RETLW  03
0017:  RETLW  00
0018:  RETLW  03
0019:  RETLW  00
001A:  RETLW  14
001B:  RETLW  3E
001C:  RETLW  14
001D:  RETLW  3E
001E:  RETLW  14
001F:  RETLW  24
0020:  RETLW  2A
0021:  RETLW  7F
0022:  RETLW  2A
0023:  RETLW  12
0024:  RETLW  43
0025:  RETLW  33
0026:  RETLW  08
0027:  RETLW  66
0028:  RETLW  61
0029:  RETLW  36
002A:  RETLW  49
002B:  RETLW  55
002C:  RETLW  22
002D:  RETLW  50
002E:  RETLW  00
002F:  RETLW  05
0030:  RETLW  03
0031:  RETLW  00
0032:  RETLW  00
0033:  RETLW  00
0034:  RETLW  1C
0035:  RETLW  22
0036:  RETLW  41
0037:  RETLW  00
0038:  RETLW  00
0039:  RETLW  41
003A:  RETLW  22
003B:  RETLW  1C
003C:  RETLW  00
003D:  RETLW  14
003E:  RETLW  08
003F:  RETLW  3E
0040:  RETLW  08
0041:  RETLW  14
0042:  RETLW  08
0043:  RETLW  08
0044:  RETLW  3E
0045:  RETLW  08
0046:  RETLW  08
0047:  RETLW  00
0048:  RETLW  50
0049:  RETLW  30
004A:  RETLW  00
004B:  RETLW  00
004C:  RETLW  08
004D:  RETLW  08
004E:  RETLW  08
004F:  RETLW  08
0050:  RETLW  08
0051:  RETLW  00
0052:  RETLW  60
0053:  RETLW  60
0054:  RETLW  00
0055:  RETLW  00
0056:  RETLW  20
0057:  RETLW  10
0058:  RETLW  08
0059:  RETLW  04
005A:  RETLW  02
005B:  RETLW  3E
005C:  RETLW  51
005D:  RETLW  49
005E:  RETLW  45
005F:  RETLW  3E
0060:  RETLW  00
0061:  RETLW  04
0062:  RETLW  02
0063:  RETLW  7F
0064:  RETLW  00
0065:  RETLW  42
0066:  RETLW  61
0067:  RETLW  51
0068:  RETLW  49
0069:  RETLW  46
006A:  RETLW  22
006B:  RETLW  41
006C:  RETLW  49
006D:  RETLW  49
006E:  RETLW  36
006F:  RETLW  18
0070:  RETLW  14
0071:  RETLW  12
0072:  RETLW  7F
0073:  RETLW  10
0074:  RETLW  27
0075:  RETLW  45
0076:  RETLW  45
0077:  RETLW  45
0078:  RETLW  39
0079:  RETLW  3E
007A:  RETLW  49
007B:  RETLW  49
007C:  RETLW  49
007D:  RETLW  32
007E:  RETLW  01
007F:  RETLW  01
0080:  RETLW  71
0081:  RETLW  09
0082:  RETLW  07
0083:  RETLW  36
0084:  RETLW  49
0085:  RETLW  49
0086:  RETLW  49
0087:  RETLW  36
0088:  RETLW  26
0089:  RETLW  49
008A:  RETLW  49
008B:  RETLW  49
008C:  RETLW  3E
008D:  RETLW  00
008E:  RETLW  36
008F:  RETLW  36
0090:  RETLW  00
0091:  RETLW  00
0092:  RETLW  00
0093:  RETLW  56
0094:  RETLW  36
0095:  RETLW  00
0096:  RETLW  00
0097:  RETLW  08
0098:  RETLW  14
0099:  RETLW  22
009A:  RETLW  41
009B:  RETLW  00
009C:  RETLW  14
009D:  RETLW  14
009E:  RETLW  14
009F:  RETLW  14
00A0:  RETLW  14
00A1:  RETLW  00
00A2:  RETLW  41
00A3:  RETLW  22
00A4:  RETLW  14
00A5:  RETLW  08
00A6:  RETLW  02
00A7:  RETLW  01
00A8:  RETLW  51
00A9:  RETLW  09
00AA:  RETLW  06
00AB:  RETLW  3E
00AC:  RETLW  41
00AD:  RETLW  59
00AE:  RETLW  55
00AF:  RETLW  5E
00B0:  RETLW  7E
00B1:  RETLW  09
00B2:  RETLW  09
00B3:  RETLW  09
00B4:  RETLW  7E
00B5:  RETLW  7F
00B6:  RETLW  49
00B7:  RETLW  49
00B8:  RETLW  49
00B9:  RETLW  36
00BA:  RETLW  3E
00BB:  RETLW  41
00BC:  RETLW  41
00BD:  RETLW  41
00BE:  RETLW  22
00BF:  RETLW  7F
00C0:  RETLW  41
00C1:  RETLW  41
00C2:  RETLW  41
00C3:  RETLW  3E
00C4:  RETLW  7F
00C5:  RETLW  49
00C6:  RETLW  49
00C7:  RETLW  49
00C8:  RETLW  41
00C9:  RETLW  7F
00CA:  RETLW  09
00CB:  RETLW  09
00CC:  RETLW  09
00CD:  RETLW  01
00CE:  RETLW  3E
00CF:  RETLW  41
00D0:  RETLW  41
00D1:  RETLW  49
00D2:  RETLW  3A
00D3:  RETLW  7F
00D4:  RETLW  08
00D5:  RETLW  08
00D6:  RETLW  08
00D7:  RETLW  7F
00D8:  RETLW  00
00D9:  RETLW  41
00DA:  RETLW  7F
00DB:  RETLW  41
00DC:  RETLW  00
00DD:  RETLW  30
00DE:  RETLW  40
00DF:  RETLW  40
00E0:  RETLW  40
00E1:  RETLW  3F
00E2:  RETLW  7F
00E3:  RETLW  08
00E4:  RETLW  14
00E5:  RETLW  22
00E6:  RETLW  41
00E7:  RETLW  7F
00E8:  RETLW  40
00E9:  RETLW  40
00EA:  RETLW  40
00EB:  RETLW  40
00EC:  RETLW  7F
00ED:  RETLW  02
00EE:  RETLW  0C
00EF:  RETLW  02
00F0:  RETLW  7F
00F1:  RETLW  7F
00F2:  RETLW  02
00F3:  RETLW  04
00F4:  RETLW  08
00F5:  RETLW  7F
00F6:  RETLW  3E
00F7:  RETLW  41
00F8:  RETLW  41
00F9:  RETLW  41
00FA:  RETLW  3E
00FB:  RETLW  7F
00FC:  RETLW  09
00FD:  RETLW  09
00FE:  RETLW  09
00FF:  RETLW  06
0100:  RETLW  1E
0101:  RETLW  21
0102:  RETLW  21
0103:  RETLW  21
0104:  RETLW  5E
0105:  RETLW  7F
0106:  RETLW  09
0107:  RETLW  09
0108:  RETLW  09
0109:  RETLW  76
010A:  BSF    0A.0
010B:  BCF    0A.1
010C:  BCF    0A.2
010D:  ADDWF  02,F
010E:  RETLW  26
010F:  RETLW  49
0110:  RETLW  49
0111:  RETLW  49
0112:  RETLW  32
0113:  RETLW  01
0114:  RETLW  01
0115:  RETLW  7F
0116:  RETLW  01
0117:  RETLW  01
0118:  RETLW  3F
0119:  RETLW  40
011A:  RETLW  40
011B:  RETLW  40
011C:  RETLW  3F
011D:  RETLW  1F
011E:  RETLW  20
011F:  RETLW  40
0120:  RETLW  20
0121:  RETLW  1F
0122:  RETLW  7F
0123:  RETLW  20
0124:  RETLW  10
0125:  RETLW  20
0126:  RETLW  7F
0127:  RETLW  41
0128:  RETLW  22
0129:  RETLW  1C
012A:  RETLW  22
012B:  RETLW  41
012C:  RETLW  07
012D:  RETLW  08
012E:  RETLW  70
012F:  RETLW  08
0130:  RETLW  07
0131:  RETLW  61
0132:  RETLW  51
0133:  RETLW  49
0134:  RETLW  45
0135:  RETLW  43
0136:  RETLW  00
0137:  RETLW  7F
0138:  RETLW  41
0139:  RETLW  00
013A:  RETLW  00
013B:  RETLW  02
013C:  RETLW  04
013D:  RETLW  08
013E:  RETLW  10
013F:  RETLW  20
0140:  RETLW  00
0141:  RETLW  00
0142:  RETLW  41
0143:  RETLW  7F
0144:  RETLW  00
0145:  RETLW  04
0146:  RETLW  02
0147:  RETLW  01
0148:  RETLW  02
0149:  RETLW  04
014A:  RETLW  40
014B:  RETLW  40
014C:  RETLW  40
014D:  RETLW  40
014E:  RETLW  40
014F:  RETLW  00
0150:  RETLW  01
0151:  RETLW  02
0152:  RETLW  04
0153:  RETLW  00
0154:  RETLW  20
0155:  RETLW  54
0156:  RETLW  54
0157:  RETLW  54
0158:  RETLW  78
0159:  RETLW  7F
015A:  RETLW  44
015B:  RETLW  44
015C:  RETLW  44
015D:  RETLW  38
015E:  RETLW  38
015F:  RETLW  44
0160:  RETLW  44
0161:  RETLW  44
0162:  RETLW  44
0163:  RETLW  38
0164:  RETLW  44
0165:  RETLW  44
0166:  RETLW  44
0167:  RETLW  7F
0168:  RETLW  38
0169:  RETLW  54
016A:  RETLW  54
016B:  RETLW  54
016C:  RETLW  18
016D:  RETLW  04
016E:  RETLW  04
016F:  RETLW  7E
0170:  RETLW  05
0171:  RETLW  05
0172:  RETLW  08
0173:  RETLW  54
0174:  RETLW  54
0175:  RETLW  54
0176:  RETLW  3C
0177:  RETLW  7F
0178:  RETLW  08
0179:  RETLW  04
017A:  RETLW  04
017B:  RETLW  78
017C:  RETLW  00
017D:  RETLW  44
017E:  RETLW  7D
017F:  RETLW  40
0180:  RETLW  00
0181:  RETLW  20
0182:  RETLW  40
0183:  RETLW  44
0184:  RETLW  3D
0185:  RETLW  00
0186:  RETLW  7F
0187:  RETLW  10
0188:  RETLW  28
0189:  RETLW  44
018A:  RETLW  00
018B:  RETLW  00
018C:  RETLW  41
018D:  RETLW  7F
018E:  RETLW  40
018F:  RETLW  00
0190:  RETLW  7C
0191:  RETLW  04
0192:  RETLW  78
0193:  RETLW  04
0194:  RETLW  78
0195:  RETLW  7C
0196:  RETLW  08
0197:  RETLW  04
0198:  RETLW  04
0199:  RETLW  78
019A:  RETLW  38
019B:  RETLW  44
019C:  RETLW  44
019D:  RETLW  44
019E:  RETLW  38
019F:  RETLW  7C
01A0:  RETLW  14
01A1:  RETLW  14
01A2:  RETLW  14
01A3:  RETLW  08
01A4:  RETLW  08
01A5:  RETLW  14
01A6:  RETLW  14
01A7:  RETLW  14
01A8:  RETLW  7C
01A9:  RETLW  00
01AA:  RETLW  7C
01AB:  RETLW  08
01AC:  RETLW  04
01AD:  RETLW  04
01AE:  RETLW  48
01AF:  RETLW  54
01B0:  RETLW  54
01B1:  RETLW  54
01B2:  RETLW  20
01B3:  RETLW  04
01B4:  RETLW  04
01B5:  RETLW  3F
01B6:  RETLW  44
01B7:  RETLW  44
01B8:  RETLW  3C
01B9:  RETLW  40
01BA:  RETLW  40
01BB:  RETLW  20
01BC:  RETLW  7C
01BD:  RETLW  1C
01BE:  RETLW  20
01BF:  RETLW  40
01C0:  RETLW  20
01C1:  RETLW  1C
01C2:  RETLW  3C
01C3:  RETLW  40
01C4:  RETLW  30
01C5:  RETLW  40
01C6:  RETLW  3C
01C7:  RETLW  44
01C8:  RETLW  28
01C9:  RETLW  10
01CA:  RETLW  28
01CB:  RETLW  44
01CC:  RETLW  0C
01CD:  RETLW  50
01CE:  RETLW  50
01CF:  RETLW  50
01D0:  RETLW  3C
01D1:  RETLW  44
01D2:  RETLW  64
01D3:  RETLW  54
01D4:  RETLW  4C
01D5:  RETLW  44
01D6:  RETLW  00
01D7:  RETLW  08
01D8:  RETLW  36
01D9:  RETLW  41
01DA:  RETLW  41
01DB:  RETLW  00
01DC:  RETLW  00
01DD:  RETLW  7F
01DE:  RETLW  00
01DF:  RETLW  00
01E0:  RETLW  41
01E1:  RETLW  41
01E2:  RETLW  36
01E3:  RETLW  08
01E4:  RETLW  00
01E5:  RETLW  02
01E6:  RETLW  01
01E7:  RETLW  02
01E8:  RETLW  04
01E9:  RETLW  02
*
0215:  CLRF   77
0216:  CLRF   78
0217:  MOVF   46,W
0218:  BCF    03.0
0219:  BTFSC  47.0
021A:  ADDWF  77,F
021B:  RRF    77,F
021C:  RRF    78,F
021D:  BTFSC  47.1
021E:  ADDWF  77,F
021F:  RRF    77,F
0220:  RRF    78,F
0221:  BTFSC  47.2
0222:  ADDWF  77,F
0223:  RRF    77,F
0224:  RRF    78,F
0225:  BTFSC  47.3
0226:  ADDWF  77,F
0227:  RRF    77,F
0228:  RRF    78,F
0229:  BTFSC  47.4
022A:  ADDWF  77,F
022B:  RRF    77,F
022C:  RRF    78,F
022D:  BTFSC  47.5
022E:  ADDWF  77,F
022F:  RRF    77,F
0230:  RRF    78,F
0231:  BTFSC  47.6
0232:  ADDWF  77,F
0233:  RRF    77,F
0234:  RRF    78,F
0235:  BTFSC  47.7
0236:  ADDWF  77,F
0237:  RRF    77,F
0238:  RRF    78,F
0239:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
.................... #use delay(crystal=4000000) 
*
0440:  MOVLW  36
0441:  MOVWF  04
0442:  BCF    03.7
0443:  MOVF   00,W
0444:  BTFSC  03.2
0445:  GOTO   454
0446:  MOVLW  01
0447:  MOVWF  78
0448:  CLRF   77
0449:  DECFSZ 77,F
044A:  GOTO   449
044B:  DECFSZ 78,F
044C:  GOTO   448
044D:  MOVLW  4A
044E:  MOVWF  77
044F:  DECFSZ 77,F
0450:  GOTO   44F
0451:  GOTO   452
0452:  DECFSZ 00,F
0453:  GOTO   446
0454:  RETURN
.................... #include <HDM64GS12.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_B0   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_B1   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_B2   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_B4   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_B5   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_C0   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    unsigned int8 left[512]; 
....................    unsigned int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
023A:  BCF    20.0
023B:  MOVF   20,W
023C:  BSF    03.5
023D:  MOVWF  07
023E:  BCF    03.5
023F:  BSF    07.0
....................    output_low(GLCD_E); 
0240:  BSF    03.5
0241:  BCF    06.5
0242:  BCF    03.5
0243:  BCF    06.5
....................    output_low(GLCD_CS1); 
0244:  BSF    03.5
0245:  BCF    06.0
0246:  BCF    03.5
0247:  BCF    06.0
....................    output_low(GLCD_CS2); 
0248:  BSF    03.5
0249:  BCF    06.1
024A:  BCF    03.5
024B:  BCF    06.1
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
024C:  BSF    03.5
024D:  BCF    06.2
024E:  BCF    03.5
024F:  BCF    06.2
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
0250:  CLRF   4D
0251:  MOVLW  C0
0252:  MOVWF  4E
0253:  CALL   1EA
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
0254:  MOVLW  01
0255:  MOVWF  4D
0256:  MOVLW  C0
0257:  MOVWF  4E
0258:  CALL   1EA
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
0259:  CLRF   4D
025A:  MOVLW  40
025B:  MOVWF  4E
025C:  CALL   1EA
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
025D:  MOVLW  01
025E:  MOVWF  4D
025F:  MOVLW  40
0260:  MOVWF  4E
0261:  CALL   1EA
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
0262:  CLRF   4D
0263:  MOVLW  B8
0264:  MOVWF  4E
0265:  CALL   1EA
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
0266:  MOVLW  01
0267:  MOVWF  4D
0268:  MOVLW  B8
0269:  MOVWF  4E
026A:  CALL   1EA
....................  
....................    if(mode == ON) 
026B:  DECFSZ 35,W
026C:  GOTO   277
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
026D:  CLRF   4D
026E:  MOVLW  3F
026F:  MOVWF  4E
0270:  CALL   1EA
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
0271:  MOVLW  01
0272:  MOVWF  4D
0273:  MOVLW  3F
0274:  MOVWF  4E
0275:  CALL   1EA
....................    } 
0276:  GOTO   280
....................    else 
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
0277:  CLRF   4D
0278:  MOVLW  3E
0279:  MOVWF  4E
027A:  CALL   1EA
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
027B:  MOVLW  01
027C:  MOVWF  4D
027D:  MOVLW  3E
027E:  MOVWF  4E
027F:  CALL   1EA
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
0280:  CLRF   36
....................  
....................    #ifdef FAST_GLCD 
*
02C6:  RETURN
....................    glcd_update(); 
....................    #endif 
.................... } 
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    unsigned int8 i, j; 
....................    unsigned int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
*
02F4:  BCF    4A.0
.................... { 
....................    unsigned int8* p; 
....................    unsigned int16 temp; 
....................    temp =  y/8; 
....................    temp *= 64; 
....................    temp += x; 
....................  
....................    if(x > 63) 
....................    { 
....................       p = displayData.right + temp - 64; 
....................    } 
....................    else 
....................    { 
....................       p = displayData.left + temp; 
....................    } 
....................  
....................    if(color) 
....................    { 
....................       bit_set(*p, y%8); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(*p, y%8); 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
02F5:  MOVF   46,W
02F6:  SUBLW  3F
02F7:  BTFSC  03.0
02F8:  GOTO   2FC
....................    { 
....................       x -= 64; 
02F9:  MOVLW  40
02FA:  SUBWF  46,F
....................       side = GLCD_RIGHT; 
02FB:  BSF    4A.0
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
02FC:  BSF    03.5
02FD:  BCF    06.2
02FE:  BCF    03.5
02FF:  BCF    06.2
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
0300:  BCF    46.7
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
0301:  BSF    46.6
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
0302:  MOVLW  00
0303:  BTFSC  4A.0
0304:  MOVLW  01
0305:  MOVWF  4B
0306:  MOVWF  4D
0307:  MOVF   46,W
0308:  MOVWF  4E
0309:  CALL   1EA
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
030A:  MOVLW  00
030B:  BTFSC  4A.0
030C:  MOVLW  01
030D:  MOVWF  4B
030E:  RRF    47,W
030F:  MOVWF  77
0310:  RRF    77,F
0311:  RRF    77,F
0312:  MOVLW  1F
0313:  ANDWF  77,F
0314:  MOVF   77,W
0315:  ANDLW  BF
0316:  IORLW  B8
0317:  MOVWF  4C
0318:  MOVF   4B,W
0319:  MOVWF  4D
031A:  MOVF   4C,W
031B:  MOVWF  4E
031C:  CALL   1EA
....................    output_high(GLCD_DI);                        // Set for data 
031D:  BSF    03.5
031E:  BCF    06.2
031F:  BCF    03.5
0320:  BSF    06.2
....................    glcd_readByte(side);                         // Need two reads to get data 
0321:  MOVLW  00
0322:  BTFSC  4A.0
0323:  MOVLW  01
0324:  MOVWF  4B
0325:  MOVWF  4C
0326:  CALL   2C7
....................    data = glcd_readByte(side);                  //  at new address 
0327:  MOVLW  00
0328:  BTFSC  4A.0
0329:  MOVLW  01
032A:  MOVWF  4B
032B:  MOVWF  4C
032C:  CALL   2C7
032D:  MOVF   78,W
032E:  MOVWF  49
....................  
....................    if(color == ON) 
032F:  DECFSZ 48,W
0330:  GOTO   341
....................       bit_set(data, y%8);        // Turn the pixel on 
0331:  MOVF   47,W
0332:  ANDLW  07
0333:  MOVWF  4B
0334:  MOVLW  01
0335:  MOVWF  77
0336:  MOVF   4B,W
0337:  MOVWF  78
0338:  BTFSC  03.2
0339:  GOTO   33E
033A:  BCF    03.0
033B:  RLF    77,F
033C:  DECFSZ 78,F
033D:  GOTO   33A
033E:  MOVF   77,W
033F:  IORWF  49,F
0340:  GOTO   351
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
0341:  MOVF   47,W
0342:  ANDLW  07
0343:  MOVWF  4B
0344:  MOVLW  01
0345:  MOVWF  77
0346:  MOVF   4B,W
0347:  MOVWF  78
0348:  BTFSC  03.2
0349:  GOTO   34E
034A:  BCF    03.0
034B:  RLF    77,F
034C:  DECFSZ 78,F
034D:  GOTO   34A
034E:  MOVF   77,W
034F:  XORLW  FF
0350:  ANDWF  49,F
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
0351:  BSF    03.5
0352:  BCF    06.2
0353:  BCF    03.5
0354:  BCF    06.2
....................    glcd_writeByte(side, x);      // Set the horizontal address 
0355:  MOVLW  00
0356:  BTFSC  4A.0
0357:  MOVLW  01
0358:  MOVWF  4B
0359:  MOVWF  4D
035A:  MOVF   46,W
035B:  MOVWF  4E
035C:  CALL   1EA
....................    output_high(GLCD_DI);         // Set for data 
035D:  BSF    03.5
035E:  BCF    06.2
035F:  BCF    03.5
0360:  BSF    06.2
....................    glcd_writeByte(side, data);   // Write the pixel data 
0361:  MOVLW  00
0362:  BTFSC  4A.0
0363:  MOVLW  01
0364:  MOVWF  4B
0365:  MOVWF  4D
0366:  MOVF   49,W
0367:  MOVWF  4E
0368:  CALL   1EA
0369:  RETURN
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    unsigned int8  data; 
....................    unsigned int8  *p1, *p2; 
....................    unsigned int16 i; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................    data = 0xFF * color; 
....................  
....................    for(i=0; i<512; ++i) 
....................    { 
....................    	*p1++ = data; 
....................    	*p2++ = data; 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    unsigned int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
*
0281:  CLRF   37
0282:  MOVF   37,W
0283:  SUBLW  07
0284:  BTFSS  03.0
0285:  GOTO   2C6
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
0286:  BSF    03.5
0287:  BCF    06.2
0288:  BCF    03.5
0289:  BCF    06.2
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
028A:  CLRF   4D
028B:  MOVLW  40
028C:  MOVWF  4E
028D:  CALL   1EA
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
028E:  MOVLW  01
028F:  MOVWF  4D
0290:  MOVLW  40
0291:  MOVWF  4E
0292:  CALL   1EA
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
0293:  MOVF   37,W
0294:  IORLW  B8
0295:  MOVWF  39
0296:  CLRF   4D
0297:  MOVF   39,W
0298:  MOVWF  4E
0299:  CALL   1EA
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
029A:  MOVF   37,W
029B:  IORLW  B8
029C:  MOVWF  39
029D:  MOVLW  01
029E:  MOVWF  4D
029F:  MOVF   39,W
02A0:  MOVWF  4E
02A1:  CALL   1EA
....................       output_high(GLCD_DI);                     // Set for data 
02A2:  BSF    03.5
02A3:  BCF    06.2
02A4:  BCF    03.5
02A5:  BSF    06.2
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
02A6:  CLRF   38
02A7:  MOVF   38,W
02A8:  SUBLW  3F
02A9:  BTFSS  03.0
02AA:  GOTO   2C4
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
02AB:  MOVLW  FF
02AC:  MOVWF  46
02AD:  MOVF   36,W
02AE:  MOVWF  47
02AF:  CALL   215
02B0:  MOVF   78,W
02B1:  MOVWF  39
02B2:  CLRF   4D
02B3:  MOVF   78,W
02B4:  MOVWF  4E
02B5:  CALL   1EA
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
02B6:  MOVLW  FF
02B7:  MOVWF  46
02B8:  MOVF   36,W
02B9:  MOVWF  47
02BA:  CALL   215
02BB:  MOVF   78,W
02BC:  MOVWF  39
02BD:  MOVLW  01
02BE:  MOVWF  4D
02BF:  MOVF   78,W
02C0:  MOVWF  4E
02C1:  CALL   1EA
02C2:  INCF   38,F
02C3:  GOTO   2A7
....................       } 
02C4:  INCF   37,F
02C5:  GOTO   282
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    set_tris_d(0x00); 
*
01EA:  MOVLW  00
01EB:  BSF    03.5
01EC:  MOVWF  08
....................     
....................    output_low(GLCD_RW);       // Set for writing 
01ED:  BCF    06.4
01EE:  BCF    03.5
01EF:  BCF    06.4
....................  
.................... 	 if(side)                   // Choose which side to write to 
01F0:  MOVF   4D,F
01F1:  BTFSC  03.2
01F2:  GOTO   1F8
....................       output_high(GLCD_CS2); 
01F3:  BSF    03.5
01F4:  BCF    06.1
01F5:  BCF    03.5
01F6:  BSF    06.1
01F7:  GOTO   1FC
....................    else 
....................       output_high(GLCD_CS1); 
01F8:  BSF    03.5
01F9:  BCF    06.0
01FA:  BCF    03.5
01FB:  BSF    06.0
....................  
.................... 	 delay_us(1); 
01FC:  NOP
....................  
....................    output_d(data);            // Put the data on the port 
01FD:  BSF    03.5
01FE:  CLRF   08
01FF:  BCF    03.5
0200:  MOVF   4E,W
0201:  MOVWF  08
....................    delay_us(1); 
0202:  NOP
....................    output_high(GLCD_E);       // Pulse the enable pin 
0203:  BSF    03.5
0204:  BCF    06.5
0205:  BCF    03.5
0206:  BSF    06.5
....................    delay_us(1); 
0207:  NOP
....................    output_low(GLCD_E); 
0208:  BSF    03.5
0209:  BCF    06.5
020A:  BCF    03.5
020B:  BCF    06.5
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
020C:  BSF    03.5
020D:  BCF    06.0
020E:  BCF    03.5
020F:  BCF    06.0
....................    output_low(GLCD_CS2); 
0210:  BSF    03.5
0211:  BCF    06.1
0212:  BCF    03.5
0213:  BCF    06.1
0214:  RETURN
.................... } 
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_d(0xFF);          // Set port d to input 
*
02C7:  MOVLW  FF
02C8:  BSF    03.5
02C9:  MOVWF  08
....................    output_high(GLCD_RW);      // Set for reading 
02CA:  BCF    06.4
02CB:  BCF    03.5
02CC:  BSF    06.4
....................  
....................    if(side)                   // Choose which side to write to 
02CD:  MOVF   4C,F
02CE:  BTFSC  03.2
02CF:  GOTO   2D5
....................       output_high(GLCD_CS2); 
02D0:  BSF    03.5
02D1:  BCF    06.1
02D2:  BCF    03.5
02D3:  BSF    06.1
02D4:  GOTO   2D9
....................    else 
....................       output_high(GLCD_CS1); 
02D5:  BSF    03.5
02D6:  BCF    06.0
02D7:  BCF    03.5
02D8:  BSF    06.0
....................  
....................    delay_us(1); 
02D9:  NOP
....................    output_high(GLCD_E);       // Pulse the enable pin 
02DA:  BSF    03.5
02DB:  BCF    06.5
02DC:  BCF    03.5
02DD:  BSF    06.5
....................    delay_us(1); 
02DE:  NOP
....................    data = input_d();          // Get the data from the display's output register 
02DF:  MOVLW  FF
02E0:  BSF    03.5
02E1:  MOVWF  08
02E2:  BCF    03.5
02E3:  MOVF   08,W
02E4:  MOVWF  4D
....................    output_low(GLCD_E); 
02E5:  BSF    03.5
02E6:  BCF    06.5
02E7:  BCF    03.5
02E8:  BCF    06.5
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
02E9:  BSF    03.5
02EA:  BCF    06.0
02EB:  BCF    03.5
02EC:  BCF    06.0
....................    output_low(GLCD_CS2); 
02ED:  BSF    03.5
02EE:  BCF    06.1
02EF:  BCF    03.5
02F0:  BCF    06.1
....................    return data;               // Return the read data 
02F1:  MOVF   4D,W
02F2:  MOVWF  78
02F3:  RETURN
.................... } 
....................  
.................... #endif 
....................  
.................... #include <graphics.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
*
0455:  MOVLW  01
0456:  MOVWF  3E
0457:  MOVWF  3F
0458:  CLRF   44
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
0459:  MOVF   35,W
045A:  SUBWF  37,W
045B:  MOVWF  45
045C:  MOVF   45,W
045D:  BTFSS  45.7
045E:  GOTO   461
045F:  MOVF   45,W
0460:  SUBLW  00
0461:  CLRF   7A
0462:  MOVWF  3C
0463:  MOVF   7A,W
0464:  MOVWF  3D
....................    dy = abs((signed int8)(y2 - y1)); 
0465:  MOVF   36,W
0466:  SUBWF  38,W
0467:  MOVWF  45
0468:  MOVF   45,W
0469:  BTFSS  45.7
046A:  GOTO   46D
046B:  MOVF   45,W
046C:  SUBLW  00
046D:  CLRF   7A
046E:  MOVWF  3A
046F:  MOVF   7A,W
0470:  MOVWF  3B
....................    #endif 
....................  
....................    if(x1 > x2) 
0471:  MOVF   35,W
0472:  SUBWF  37,W
0473:  BTFSC  03.0
0474:  GOTO   477
....................       addx = -1; 
0475:  MOVLW  FF
0476:  MOVWF  3E
....................    if(y1 > y2) 
0477:  MOVF   36,W
0478:  SUBWF  38,W
0479:  BTFSC  03.0
047A:  GOTO   47D
....................       addy = -1; 
047B:  MOVLW  FF
047C:  MOVWF  3F
....................  
....................    if(dx >= dy) 
047D:  MOVF   3B,W
047E:  SUBWF  3D,W
047F:  BTFSS  03.0
0480:  GOTO   4C9
0481:  BTFSS  03.2
0482:  GOTO   487
0483:  MOVF   3A,W
0484:  SUBWF  3C,W
0485:  BTFSS  03.0
0486:  GOTO   4C9
....................    { 
....................       dy *= 2; 
0487:  BCF    03.0
0488:  RLF    3A,F
0489:  RLF    3B,F
....................       P = dy - dx; 
048A:  MOVF   3C,W
048B:  SUBWF  3A,W
048C:  MOVWF  77
048D:  MOVF   3B,W
048E:  MOVWF  7A
048F:  MOVF   3D,W
0490:  BTFSS  03.0
0491:  INCFSZ 3D,W
0492:  SUBWF  7A,F
0493:  MOVF   77,W
0494:  MOVWF  40
0495:  MOVF   7A,W
0496:  MOVWF  41
....................       diff = P - dx; 
0497:  MOVF   3C,W
0498:  SUBWF  40,W
0499:  MOVWF  42
049A:  MOVF   41,W
049B:  MOVWF  43
049C:  MOVF   3D,W
049D:  BTFSS  03.0
049E:  INCFSZ 3D,W
049F:  SUBWF  43,F
....................  
....................       for(; i<=dx; ++i) 
04A0:  MOVF   3D,F
04A1:  BTFSS  03.2
04A2:  GOTO   4A7
04A3:  MOVF   44,W
04A4:  SUBWF  3C,W
04A5:  BTFSS  03.0
04A6:  GOTO   4C8
....................       { 
....................          glcd_pixel(x1, y1, color); 
04A7:  MOVF   35,W
04A8:  MOVWF  46
04A9:  MOVF   36,W
04AA:  MOVWF  47
04AB:  MOVF   39,W
04AC:  MOVWF  48
04AD:  CALL   2F4
....................  
....................          if(P < 0) 
04AE:  BTFSS  41.7
04AF:  GOTO   4BA
....................          { 
....................             P  += dy; 
04B0:  MOVF   3A,W
04B1:  ADDWF  40,F
04B2:  MOVF   3B,W
04B3:  BTFSC  03.0
04B4:  INCFSZ 3B,W
04B5:  ADDWF  41,F
....................             x1 += addx; 
04B6:  MOVF   3E,W
04B7:  ADDWF  35,W
04B8:  MOVWF  35
....................          } 
04B9:  GOTO   4C6
....................          else 
....................          { 
....................             P  += diff; 
04BA:  MOVF   42,W
04BB:  ADDWF  40,F
04BC:  MOVF   43,W
04BD:  BTFSC  03.0
04BE:  INCFSZ 43,W
04BF:  ADDWF  41,F
....................             x1 += addx; 
04C0:  MOVF   3E,W
04C1:  ADDWF  35,W
04C2:  MOVWF  35
....................             y1 += addy; 
04C3:  MOVF   3F,W
04C4:  ADDWF  36,W
04C5:  MOVWF  36
....................          } 
04C6:  INCF   44,F
04C7:  GOTO   4A0
....................       } 
....................    } 
04C8:  GOTO   50A
....................    else 
....................    { 
....................       dx *= 2; 
04C9:  BCF    03.0
04CA:  RLF    3C,F
04CB:  RLF    3D,F
....................       P = dx - dy; 
04CC:  MOVF   3A,W
04CD:  SUBWF  3C,W
04CE:  MOVWF  77
04CF:  MOVF   3D,W
04D0:  MOVWF  7A
04D1:  MOVF   3B,W
04D2:  BTFSS  03.0
04D3:  INCFSZ 3B,W
04D4:  SUBWF  7A,F
04D5:  MOVF   77,W
04D6:  MOVWF  40
04D7:  MOVF   7A,W
04D8:  MOVWF  41
....................       diff = P - dy; 
04D9:  MOVF   3A,W
04DA:  SUBWF  40,W
04DB:  MOVWF  42
04DC:  MOVF   41,W
04DD:  MOVWF  43
04DE:  MOVF   3B,W
04DF:  BTFSS  03.0
04E0:  INCFSZ 3B,W
04E1:  SUBWF  43,F
....................  
....................       for(; i<=dy; ++i) 
04E2:  MOVF   3B,F
04E3:  BTFSS  03.2
04E4:  GOTO   4E9
04E5:  MOVF   44,W
04E6:  SUBWF  3A,W
04E7:  BTFSS  03.0
04E8:  GOTO   50A
....................       { 
....................          glcd_pixel(x1, y1, color); 
04E9:  MOVF   35,W
04EA:  MOVWF  46
04EB:  MOVF   36,W
04EC:  MOVWF  47
04ED:  MOVF   39,W
04EE:  MOVWF  48
04EF:  CALL   2F4
....................  
....................          if(P < 0) 
04F0:  BTFSS  41.7
04F1:  GOTO   4FC
....................          { 
....................             P  += dx; 
04F2:  MOVF   3C,W
04F3:  ADDWF  40,F
04F4:  MOVF   3D,W
04F5:  BTFSC  03.0
04F6:  INCFSZ 3D,W
04F7:  ADDWF  41,F
....................             y1 += addy; 
04F8:  MOVF   3F,W
04F9:  ADDWF  36,W
04FA:  MOVWF  36
....................          } 
04FB:  GOTO   508
....................          else 
....................          { 
....................             P  += diff; 
04FC:  MOVF   42,W
04FD:  ADDWF  40,F
04FE:  MOVF   43,W
04FF:  BTFSC  03.0
0500:  INCFSZ 43,W
0501:  ADDWF  41,F
....................             x1 += addx; 
0502:  MOVF   3E,W
0503:  ADDWF  35,W
0504:  MOVWF  35
....................             y1 += addy; 
0505:  MOVF   3F,W
0506:  ADDWF  36,W
0507:  MOVWF  36
....................          } 
0508:  INCF   44,F
0509:  GOTO   4E2
....................       } 
....................    } 
050A:  RETURN
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
....................       { 
....................          xmin = x1; 
....................          xmax = x2; 
....................       } 
....................       else 
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
....................       { 
....................          ymin = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
....................          { 
....................             glcd_pixel(xmin, i, color); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................       glcd_line(x1, y2, x2, y2, color); 
....................       glcd_line(x1, y1, x1, y2, color); 
....................       glcd_line(x2, y1, x2, y2, color); 
....................    } 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
036A:  MOVF   38,W
036B:  MOVWF  7A
036C:  MOVF   37,W
036D:  MOVWF  04
036E:  BCF    03.7
036F:  BTFSC  7A.0
0370:  BSF    03.7
0371:  MOVF   00,F
0372:  BTFSC  03.2
0373:  GOTO   43F
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
0374:  MOVF   38,W
0375:  MOVWF  7A
0376:  MOVF   37,W
0377:  MOVWF  04
0378:  BCF    03.7
0379:  BTFSC  7A.0
037A:  BSF    03.7
037B:  MOVF   00,W
037C:  SUBLW  52
037D:  BTFSS  03.0
037E:  GOTO   39D
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
037F:  MOVF   38,W
0380:  MOVWF  7A
0381:  MOVF   37,W
0382:  MOVWF  04
0383:  BCF    03.7
0384:  BTFSC  7A.0
0385:  BSF    03.7
0386:  MOVLW  20
0387:  SUBWF  00,W
0388:  MOVWF  45
0389:  MOVWF  46
038A:  MOVLW  05
038B:  MOVWF  47
038C:  CALL   215
038D:  MOVF   78,W
038E:  MOVWF  44
038F:  MOVWF  78
0390:  MOVLW  05
0391:  MOVWF  77
0392:  MOVLW  3F
0393:  MOVWF  04
0394:  BCF    03.7
0395:  MOVF   78,W
0396:  CALL   004
0397:  MOVWF  00
0398:  INCF   78,F
0399:  INCF   04,F
039A:  DECFSZ 77,F
039B:  GOTO   395
039C:  GOTO   3CB
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
039D:  MOVF   38,W
039E:  MOVWF  7A
039F:  MOVF   37,W
03A0:  MOVWF  04
03A1:  BCF    03.7
03A2:  BTFSC  7A.0
03A3:  BSF    03.7
03A4:  MOVF   00,W
03A5:  SUBLW  7E
03A6:  BTFSS  03.0
03A7:  GOTO   3C6
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
03A8:  MOVF   38,W
03A9:  MOVWF  7A
03AA:  MOVF   37,W
03AB:  MOVWF  04
03AC:  BCF    03.7
03AD:  BTFSC  7A.0
03AE:  BSF    03.7
03AF:  MOVLW  53
03B0:  SUBWF  00,W
03B1:  MOVWF  45
03B2:  MOVWF  46
03B3:  MOVLW  05
03B4:  MOVWF  47
03B5:  CALL   215
03B6:  MOVF   78,W
03B7:  MOVWF  44
03B8:  MOVWF  78
03B9:  MOVLW  05
03BA:  MOVWF  77
03BB:  MOVLW  3F
03BC:  MOVWF  04
03BD:  BCF    03.7
03BE:  MOVF   78,W
03BF:  CALL   10A
03C0:  MOVWF  00
03C1:  INCF   78,F
03C2:  INCF   04,F
03C3:  DECFSZ 77,F
03C4:  GOTO   3BE
03C5:  GOTO   3CB
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
03C6:  CLRF   3F
03C7:  CLRF   40
03C8:  CLRF   41
03C9:  CLRF   42
03CA:  CLRF   43
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
03CB:  MOVF   38,W
03CC:  MOVWF  7A
03CD:  MOVF   37,W
03CE:  MOVWF  04
03CF:  BCF    03.7
03D0:  BTFSC  7A.0
03D1:  BSF    03.7
03D2:  MOVF   00,W
03D3:  XORLW  0A
03D4:  BTFSC  03.2
03D5:  GOTO   3DA
03D6:  XORLW  07
03D7:  BTFSC  03.2
03D8:  GOTO   3E3
03D9:  GOTO   3E5
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
03DA:  MOVLW  07
03DB:  MOVWF  46
03DC:  MOVF   39,W
03DD:  MOVWF  47
03DE:  CALL   215
03DF:  MOVLW  01
03E0:  ADDWF  78,W
03E1:  ADDWF  36,F
....................             continue; 
03E2:  GOTO   43A
....................          case '\r': 
....................             x = 0; 
03E3:  CLRF   35
....................             continue; 
03E4:  GOTO   43A
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
03E5:  MOVLW  05
03E6:  MOVWF  46
03E7:  MOVF   39,W
03E8:  MOVWF  47
03E9:  CALL   215
03EA:  MOVF   78,W
03EB:  ADDWF  35,W
03EC:  SUBLW  7F
03ED:  BTFSC  03.0
03EE:  GOTO   3F8
....................       { 
....................          x = 0;                           // Set x at far left position 
03EF:  CLRF   35
....................          y += 7*size + 1;                 // Set y at next position down 
03F0:  MOVLW  07
03F1:  MOVWF  46
03F2:  MOVF   39,W
03F3:  MOVWF  47
03F4:  CALL   215
03F5:  MOVLW  01
03F6:  ADDWF  78,W
03F7:  ADDWF  36,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
03F8:  CLRF   3B
03F9:  MOVF   3B,W
03FA:  SUBLW  04
03FB:  BTFSS  03.0
03FC:  GOTO   43A
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
03FD:  CLRF   3C
03FE:  MOVF   3C,W
03FF:  SUBLW  06
0400:  BTFSS  03.0
0401:  GOTO   436
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
0402:  MOVLW  3F
0403:  ADDWF  3B,W
0404:  MOVWF  04
0405:  BCF    03.7
0406:  MOVF   00,W
0407:  MOVWF  44
0408:  MOVWF  77
0409:  MOVF   3C,W
040A:  MOVWF  78
040B:  BTFSC  03.2
040C:  GOTO   411
040D:  BCF    03.0
040E:  RRF    77,F
040F:  DECFSZ 78,F
0410:  GOTO   40D
0411:  BTFSS  77.0
0412:  GOTO   434
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
0413:  CLRF   3D
0414:  MOVF   39,W
0415:  SUBWF  3D,W
0416:  BTFSC  03.0
0417:  GOTO   434
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
0418:  CLRF   3E
0419:  MOVF   39,W
041A:  SUBWF  3E,W
041B:  BTFSC  03.0
041C:  GOTO   432
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
041D:  MOVF   3E,W
041E:  ADDWF  35,W
041F:  MOVWF  44
0420:  MOVF   3C,W
0421:  MOVWF  46
0422:  MOVF   39,W
0423:  MOVWF  47
0424:  CALL   215
0425:  MOVF   78,W
0426:  ADDWF  36,W
0427:  ADDWF  3D,W
0428:  MOVWF  45
0429:  MOVF   44,W
042A:  MOVWF  46
042B:  MOVF   45,W
042C:  MOVWF  47
042D:  MOVF   3A,W
042E:  MOVWF  48
042F:  CALL   2F4
0430:  INCF   3E,F
0431:  GOTO   419
....................                   } 
0432:  INCF   3D,F
0433:  GOTO   414
....................                } 
....................             } 
0434:  INCF   3C,F
0435:  GOTO   3FE
....................          } 
0436:  INCF   3B,F
0437:  MOVF   39,W
0438:  ADDWF  35,F
0439:  GOTO   3F9
....................       } 
043A:  INCF   37,F
043B:  BTFSC  03.2
043C:  INCF   38,F
043D:  INCF   35,F
043E:  GOTO   36A
....................    } 
043F:  RETURN
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
....................  
....................  
.................... char text1[] = "KSU"; 
*
0518:  MOVLW  4B
0519:  BCF    03.5
051A:  MOVWF  21
051B:  MOVLW  53
051C:  MOVWF  22
051D:  MOVLW  55
051E:  MOVWF  23
051F:  CLRF   24
.................... char text2[] = "University"; 
0520:  MOVWF  25
0521:  MOVLW  6E
0522:  MOVWF  26
0523:  MOVLW  69
0524:  MOVWF  27
0525:  MOVLW  76
0526:  MOVWF  28
0527:  MOVLW  65
0528:  MOVWF  29
0529:  MOVLW  72
052A:  MOVWF  2A
052B:  MOVLW  73
052C:  MOVWF  2B
052D:  MOVLW  69
052E:  MOVWF  2C
052F:  MOVLW  74
0530:  MOVWF  2D
0531:  MOVLW  79
0532:  MOVWF  2E
0533:  CLRF   2F
.................... int i, x1, x2, y1, y2; 
....................  
.................... void main() 
*
050B:  MOVF   03,W
050C:  ANDLW  1F
050D:  MOVWF  03
050E:  MOVLW  FF
050F:  MOVWF  20
0510:  BSF    03.5
0511:  BSF    1F.0
0512:  BSF    1F.1
0513:  BSF    1F.2
0514:  BCF    1F.3
0515:  MOVLW  07
0516:  MOVWF  1C
0517:  BCF    03.7
.................... { 
....................    setup_psp(PSP_DISABLED); 
*
0534:  BSF    03.5
0535:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
0536:  BCF    03.5
0537:  CLRF   10
....................    setup_timer_2(T2_DISABLED, 0, 1); 
0538:  MOVLW  00
0539:  MOVWF  78
053A:  MOVWF  12
053B:  MOVLW  00
053C:  BSF    03.5
053D:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
053E:  BSF    1F.0
053F:  BSF    1F.1
0540:  BSF    1F.2
0541:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
0542:  BCF    03.5
0543:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
0544:  MOVLW  F0
0545:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF); 
0546:  ANDWF  1D,F
....................     
....................    glcd_init(ON); 
0547:  MOVLW  01
0548:  MOVWF  35
0549:  CALL   23A
....................     
....................    while(TRUE) 
....................    { 
....................    glcd_init(ON); 
054A:  MOVLW  01
054B:  MOVWF  35
054C:  CALL   23A
....................    glcd_text57(39,5, text1, 2, ON); 
054D:  MOVLW  27
054E:  MOVWF  35
054F:  MOVLW  05
0550:  MOVWF  36
0551:  CLRF   38
0552:  MOVLW  21
0553:  MOVWF  37
0554:  MOVLW  02
0555:  MOVWF  39
0556:  MOVLW  01
0557:  MOVWF  3A
0558:  CALL   36A
....................    glcd_text57(5,30, text2, 2, ON); 
0559:  MOVLW  05
055A:  MOVWF  35
055B:  MOVLW  1E
055C:  MOVWF  36
055D:  CLRF   38
055E:  MOVLW  25
055F:  MOVWF  37
0560:  MOVLW  02
0561:  MOVWF  39
0562:  MOVLW  01
0563:  MOVWF  3A
0564:  CALL   36A
....................    delay_ms(2000); 
0565:  MOVLW  08
0566:  MOVWF  35
0567:  MOVLW  FA
0568:  MOVWF  36
0569:  CALL   440
056A:  DECFSZ 35,F
056B:  GOTO   567
....................    glcd_init(ON); 
056C:  MOVLW  01
056D:  MOVWF  35
056E:  CALL   23A
....................    glcd_line(5, 0, 80, 0, ON); 
056F:  MOVLW  05
0570:  MOVWF  35
0571:  CLRF   36
0572:  MOVLW  50
0573:  MOVWF  37
0574:  CLRF   38
0575:  MOVLW  01
0576:  MOVWF  39
0577:  CALL   455
....................    glcd_line(5, 50, 80, 50, ON); 
0578:  MOVLW  05
0579:  MOVWF  35
057A:  MOVLW  32
057B:  MOVWF  36
057C:  MOVLW  50
057D:  MOVWF  37
057E:  MOVLW  32
057F:  MOVWF  38
0580:  MOVLW  01
0581:  MOVWF  39
0582:  CALL   455
....................    delay_ms(2000); 
0583:  MOVLW  08
0584:  MOVWF  35
0585:  MOVLW  FA
0586:  MOVWF  36
0587:  CALL   440
0588:  DECFSZ 35,F
0589:  GOTO   585
....................    glcd_init(ON); 
058A:  MOVLW  01
058B:  MOVWF  35
058C:  CALL   23A
....................    delay_ms(20); 
058D:  MOVLW  14
058E:  MOVWF  36
058F:  CALL   440
0590:  GOTO   54A
....................    } 
....................  
.................... } 
....................  
0591:  SLEEP
....................  

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
